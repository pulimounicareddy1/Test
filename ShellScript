1.	INTRODUCTION:
1.1	Introduction to Kernel:

Kernel is heart of Linux O/S. It manages resource of Linux O/S. Resources means facilities available in Linux. For Ex. Facility to store data, print data on printer, memory, file management etc . Kernel decides who will use this resource, for how long and when. It runs your programs (or set up to execute binary files) It's Memory resident portion of Linux. It performance following tasks

	I/O management
	Process management
	Device management
	File management
	Memory management

1.2	Linux Shell:

Computer understand the language of 0's and 1's called binary language, In early days of computing, instruction are provided using binary language, which is difficult for all of us, to read and write. So in O/s there is special program called Shell. Shell accepts your instruction or commands in English and translates it into computers native binary language.

This is what Shell Does for US


You type Your command and shell convert it as


It's environment provided for user interaction. Shell is an command language interpreter that executes commands read from the standard input device or from a file.

1.3	Types of Linux Shells:

Shell is not part of system kernel, but uses the system kernel to execute programs, create files etc.

Several shell available with Linux.

	BASH – Bourne-Again Shell.
	CSH – C Shell
	KSH – Korn Shell
	TCSH – Advanced Version of C Shell.
 


1.4	How to use Linux Shell?

To use shell (You start to use your shell as soon as you log into your system) you have to simply type commands.

1.5	What is Shell Script?

Shell Script is series of command written in plain text file. Shell script is just like batch file is MS-DOS but have more power than the MS-DOS batch file.

1.6	Uses of Shell Script:

	Combine lengthy and repetitive sequences of commands into a single, simple command.
	Generalize a sequence of operations on one set of data, into a procedure that can be applied to any similar set of data.
	Create new commands using combinations of utilities in ways the original authors never thought of.
	Simple shell scripts might be written as shell aliases, but the script can be made available to all users and all processes. Shell aliases apply only to the current shell.
	Create customized datasets on the fly, and call applications.

1.7	Getting Help in UNIX.

To get the help in Linux Command line you can use the following commands followed by the command name to get displayed the information of the command in detail.

	help
	man
	info

1.8	Create a Shell Script:

You can create a shell script using the basic editors like vi and nano. After creating a script file you can check the permissions and attributes of the file.

If you editing on the command line then vi or vim editors are preferred or if you editing a file in GUI of linux you may use the nano editor.
1.9	File types and attributes.

Each and every content in Unix / Linux is a file and it supports a several different types of files. To determine the file type, specify the –l option to the ls command. The first character of the ls –l output determines the type of the file. For example the command

Here, you see that the very first character is a hyphen (-). This indicates that the file is a regular file. For special files, the first character will be one of the letters given in the following table.

Character	Description
-	Regular File
l	Symbolic Link
c	Character Special
b	Block Special
p	Named Pipe
 
s	Socket File
d	Directory File

1.10	File Permissions:

File permissions provides a secure method for storing files. Every file in UNIX has the following attributes:

•	Owner Permissions. – Determines actions owner can perform on the file.
•	Group Permissions. – Determines actions that owner group can perform on the file.
•	Others Permissions. – Determines actions that global users can perform on the file.

The following are the actions that can be performed on any of the file.

•	Read
•	Write
•	Execute

If a user has read permissions, that person can view the contents of a file. A user with write permissions can change the contents of a file, whereas a user with execute permissions can run a file as a program.

You can check the permissions of a file using the ls –l command. For example.

To change the ownership permissions of file using chown command and this command can only be executed by root user.

To change the file actions permissions of a file using chmod command and this can be given by the owner of the file.
 
2.	GETTING STARTED:
2.1	Shebang:

The #! Syntax used in scripts to indicate an interpreter for execution under UNIX / Linux operating systems. Most Linux shell and Perl / Python script starts with the following line:

#!/bin/bash
OR
#!/usr/bin/perl
OR
#!/usr/bin/python

	It is called a shebang or a "bang" line.
	It is nothing but the absolute path to the Bash interpreter.
	It consists of a number sign and an exclamation point character (#!), followed by the full path to the interpreter such as /bin/bash.
	All scripts under Linux execute using the interpreter specified on a first line.
	Almost all bash scripts often begin with #!/bin/bash (assuming that Bash has been installed in /bin)
	This ensures that Bash will be used to interpret the script, even if it is executed under another shell.
	The shebang was introduced by Dennis Ritchie between Version 7 Unix and 8 at Bell Laboratories.
	If you do not specify an interpreter line, the default is usually the /bin/sh. But, it is recommended that you set #!/bin/bash line.

2.2	Comments:

You should be aware of the fact that you might not be the only person reading your code. A lot of users and system administrators run scripts that were written by other people. If they want to see how you did it, comments are useful to enlighten the reader.

Comments also make your own life easier. Say that you had to read a lot of man pages in order to achieve a particular result with some command that you used in your script. You won't remember how it worked if you need to change your script after a few weeks or months, unless you have commented what you did, how you did it and/or why you did it.

By default shell script can be commented out prefixing # character, So if there are any lines starting with # then those lines will be treated as comments and those will be removed at the time of executing the scripts.

2.3	Executing a shell script.

The easiest way to run shell script in Linux or UNIX is to type the following commands. Open the terminal and type the command.
OR
 

Another recommend option is to set an executable permission using the chmod command as follows.

And run your shell script file as follows or you can give the full path of the file also.
